--> Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
    If target is not found in the array, return [-1, -1].
    You must write an algorithm with O(log n) runtime complexity.

--> Example 1:
    Input: nums = [5,7,7,8,8,10], target = 8
    Output: [3,4]

--> Example 2:
    Input: nums = [5,7,7,8,8,10], target = 6
    Output: [-1,-1]

--> Code : 
    class Solution {
    public:
        int first_index(vector<int>& nums, int target){
            int start = 0;
            int end = nums.size()-1;
            int mid = start + (end-start)/2;
            int ans = -1;
            while(start <= end){
                if (nums[mid] == target){
                    ans = mid ;
                    end = mid-1;
                }
                else if (nums[mid] > target){
                    end = mid -1;
                }
                else {start = mid +1;}
                mid = start + (end-start)/2;
            }
            return ans;
        }
    
        int last_index(vector<int>& nums, int target){
            int start = 0;
            int end = nums.size()-1;
            int mid = start + (end-start)/2;
            int ans = -1;
            while(start <= end){
                if (nums[mid] == target){
                    ans = mid ;
                    start = mid +1;
                }
                else if (nums[mid] > target){
                    end = mid -1;
                }
                else {start = mid +1;}
                mid = start + (end-start)/2;
            }
            return ans;
        }
    
        vector<int> searchRange(vector<int>& nums, int target) {
            vector<int> ans;
            ans.push_back(first_index(nums,target));
            ans.push_back(last_index(nums,target));
            return ans;
        }
    };
