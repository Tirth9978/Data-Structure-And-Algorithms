--> Given an m x n matrix, return all elements of the matrix in spiral order.

--> Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
    Output: [1,2,3,6,9,8,7,4,5]

--> Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
    Output: [1,2,3,4,8,12,11,10,9,5,6,7]

--> Code : 
    class Solution {
    public:
        vector<int> spiralOrder(vector<vector<int>>& matrix) {
            vector<int> ans;
            if (matrix.empty() || matrix[0].empty()) return ans;
            
            int row = matrix.size();
            int col = matrix[0].size();
            
            int startRow = 0, endRow = row - 1;
            int startCol = 0, endCol = col - 1;
            
            while (startRow <= endRow && startCol <= endCol) {
                // Traverse from left to right
                for (int i = startCol; i <= endCol; ++i) {
                    ans.push_back(matrix[startRow][i]);
                }
                ++startRow;
                
                // Traverse from top to bottom
                for (int i = startRow; i <= endRow; ++i) {
                    ans.push_back(matrix[i][endCol]);
                }
                --endCol;
                
                // Traverse from right to left, if there are rows remaining
                if (startRow <= endRow) {
                    for (int i = endCol; i >= startCol; --i) {
                        ans.push_back(matrix[endRow][i]);
                    }
                    --endRow;
                }
                
                // Traverse from bottom to top, if there are columns remaining
                if (startCol <= endCol) {
                    for (int i = endRow; i >= startRow; --i) {
                        ans.push_back(matrix[i][startCol]);
                    }
                    ++startCol;
                }
            }
            
            return ans;
        }
    };
