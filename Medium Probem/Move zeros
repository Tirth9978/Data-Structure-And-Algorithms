--> Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
    Note that you must do this in-place without making a copy of the array.

--> Example 1:
    Input: nums = [0,1,0,3,12]
    Output: [1,3,12,0,0]

    Example 2:
    Input: nums = [0]
    Output: [0]

--> Code 1: 
    class Solution {
    public:
        void moveZeroes(vector<int>& nums) {
            vector <int> nums_1(nums);
            int j=0,k=nums.size()-1;
            for (int i=0;i<nums_1.size();i++){
                if (nums_1[i] == 0){
                    nums[k] = nums_1[i];
                    k--;
                }
                else {
                    nums[j] = nums_1[i];
                    j++;
                }
            }
            nums_1.clear();
            return ;
        }
    };


--> Code 2 : 
    class Solution {
    public:
        void moveZeroes(vector<int>& nums) {
            int i =0;
            for (int j=0;j<nums.size();j++){
                if (nums[j] != 0){
                    swap(nums[j] , nums[i]);i++;
                }
            }
        }
    };

--> Code 3 : 

        class Solution {
        public:
            void moveZeroes(vector<int>& nums) {
                int count = 0;
                int i = 0;
                while(i < nums.size()){
                    if (nums[i] == 0){
                        count ++;
                        nums.erase(nums.begin()+i);
                        continue;
                    }
                    i++;
                }
                for (int i=0;i<count;i++){
                    nums.push_back(0);
                }
            }
        };


--> Code 3 : 
        class Solution {
        public:
            void moveZeroes(vector<int>& nums) {
                int count =0;
                for (int i=0;i<nums.size();i++){
                    if (nums[i] == 0){
                        count ++;
                    }
                }
                vector<int> ans;
                for (int i=0;i<nums.size();i++){
                    if (nums[i]!= 0){
                        ans.push_back(nums[i]);
                    }
                }
                for (int i=0;i<count;i++){
                    ans.push_back(0);
                }
        
                for (int i=0;i<nums.size();i++){
                    nums[i] = ans[i];
                }
                return ;
            }
        };
