--> Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
    Integers in each row are sorted in ascending from left to right.
    Integers in each column are sorted in ascending from top to bottom.

--> Ex 1 : Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
            Output: true

--> Ex 2 : 
      Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
      Output: false

--> Code : 
    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int side = 0;
            int start = 0;
            int end = matrix[0].size()-1;
            int mid = start + (end  - start)/2;
    
            while(side < matrix.size()  ){
                
    
                if (matrix[side][mid] == target){
                    return true;
                }
                else if (matrix[side][mid] < target){
                    start = mid +1;
                }
                else {
                    end = mid -1;
                }
                if (start > end){
                    start = 0;
                    end = matrix[0].size()-1;
                    side++;
                }
                mid = start + (end  - start)/2;
            }
            return false;
        }
    };
