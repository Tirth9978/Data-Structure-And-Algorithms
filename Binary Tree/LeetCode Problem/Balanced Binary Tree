--> Given a binary tree, determine if it is height-balanced.

--> height-balanced : A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

--> Code 1 : 
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
  private :
      int Height(TreeNode * root){
          if (root == NULL)return 0;
  
          int left = Height(root -> left);
          int right = Height(root -> right);
  
          return max(left , right) + 1;
      }
  
  public:
      bool isBalanced(TreeNode* root) {
          if (root == NULL)return 1;
  
          bool left = isBalanced(root->left);
          bool right = isBalanced(root->right);
  
          bool diff = abs(Height(root->left)-Height(root->right)) <= 1;
  
          if (diff && left && right)return 1;
          return 0;
      }
  };


--> Code 2 : 
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
  public:
  
      pair<bool , int> ans(TreeNode * root){
          if (root == NULL){
              pair<bool , int> p = make_pair(true , 0);
              return p;
          }
          pair<bool ,int> left = ans(root -> left);
          pair<bool , int> right = ans(root -> right);
  
          bool diff = (abs(left.second - right.second) <= 1);
  
          pair<bool ,int> ans ;
          ans.second = max(left.second,right.second) + 1;
          if (left.first && right.first && diff) ans.first = 1;
          else ans.first = 0;
          return ans ;
      }
  
      bool isBalanced(TreeNode* root) {
          return ans(root).first;
      }
  };
