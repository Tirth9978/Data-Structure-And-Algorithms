--> Given the root of a complete binary tree, return the number of the nodes in the tree.
  According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
  Design an algorithm that runs in less than O(n) time complexity.

--> Code :   
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
  public:
  
  
      void level(TreeNode * root,int & count){
          queue<TreeNode*> q;
          q.push(root);
          // q.push(NULL);
          while(!q.empty()){
              TreeNode * temp = q.front();
              q.pop();
              count ++ ;
              if (temp !=NULL){
                  if (temp->left)q.push(temp->left);
                  if (temp->right)q.push(temp->right);
              }
              
          }
          return ;
      }
      int countNodes(TreeNode* root) {
          if (root == NULL)return 0;
          int count =0;
          
          level(root,count);
          return count ;
      }
  };
