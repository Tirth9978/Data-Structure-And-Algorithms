--> Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.
    A substring is a contiguous sequence of characters within a string.

--> Ex 1 : Input: patterns = ["a","abc","bc","d"], word = "abc"
    Output: 3
    Explanation:
    - "a" appears as a substring in "abc".
    - "abc" appears as a substring in "abc".
    - "bc" appears as a substring in "abc".
    - "d" does not appear as a substring in "abc".
    3 of the strings in patterns appear as a substring in word.

--> Ex 2 : 
    Input: patterns = ["a","b","c"], word = "aaaaabbbbb"
    Output: 2
    Explanation:
    - "a" appears as a substring in "aaaaabbbbb".
    - "b" appears as a substring in "aaaaabbbbb".
    - "c" does not appear as a substring in "aaaaabbbbb".
    2 of the strings in patterns appear as a substring in word.

--> Code : 
    class Solution {
    public:
        int numOfStrings(vector<string>& patterns, string word) {
            int count =0;
            for (int i=0;i<patterns.size();i++){
                string str = patterns[i];
                if (word.find(str) < word.size()){
                    cout << str;
                    count ++;
                }
            }
            return count ;
        }
    };
