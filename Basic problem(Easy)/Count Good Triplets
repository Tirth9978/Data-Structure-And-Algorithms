--> Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.

    A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:
    
    0 <= i < j < k < arr.length
    |arr[i] - arr[j]| <= a
    |arr[j] - arr[k]| <= b
    |arr[i] - arr[k]| <= c
    Where |x| denotes the absolute value of x.
    
    Return the number of good triplets.

--> Ex 1 : 
    Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
    Output: 4
    Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].

--> Ex 2 : 
    Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
    Output: 0
    Explanation: No triplet satisfies all conditions.

--> Code : 
    class Solution {
    public:
        int countGoodTriplets(vector<int>& arr, int a1, int b1, int c1) {
            int count =0;
            for (int i=0;i<arr.size()-2;i++){
                for (int j=i+1;j<arr.size()-1;j++){
                    for (int k=j+1;k<arr.size();k++){
                        int a = arr[i] - arr[j];
                        if (a < 0){ a = -(a);}
                        int b = arr[j] - arr[k];
                        if (b < 0) { b = -(b);}
                        int c = arr[i] - arr[k];
                        if (c < 0){c = -(c);}
                        if (a <=a1 && b <= b1 && c <= c1){
                            count ++;
                        }
                    }
                }
    
            }
            return count ;
        }
    };
