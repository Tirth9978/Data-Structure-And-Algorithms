--> Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:
    answer.length == nums.length.
    answer[i] = |leftSum[i] - rightSum[i]|.

-->leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
    rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.
    Return the array answer.

--> Ex 1 : 
    Input: nums = [10,4,8,3]
    Output: [15,1,11,22]
    Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].
    The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].

--> ex 2 ; 
    Input: nums = [1]
    Output: [0]
    Explanation: The array leftSum is [0] and the array rightSum is [0].
    The array answer is [|0 - 0|] = [0].


--> Code : 
    class Solution {
    public:
        vector<int> leftRightDifference(vector<int>& nums) {
            vector<int> arr1(nums.size(),0);
            vector<int> arr2(nums.size(),0);
            vector<int> ans;
            int i=1;
            while(i < nums.size()){
                int sum = 0;
                for (int j=i-1;j>=0;j--){
                    sum += nums[j];
                }
                arr1[i] = sum;
                i ++;
            }
            i = nums.size()-2;
            while(i >=0){
                int sum = 0;
                for (int j = i+1;j<nums.size();j++){
                    sum+=nums[j];
                }
                arr2[i] = sum;
                i--;
            }
            for (int i=0;i<nums.size();i++){
                int ref = arr1[i] - arr2[i];
                if (ref < 0){
                    ref = -ref;
                }
                ans.push_back(ref);
            }
            return ans;
        }
    };
